name: Backend Testing Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:7.0
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: password123
          MONGO_INITDB_DATABASE: jobportal_test
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand(\"ping\").ok' --quiet"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    strategy:
      matrix:
        python-version: ["3.11"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y tesseract-ocr poppler-utils

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt', 'backend/requirements-test.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt
        pip install -r backend/requirements-test.txt

    - name: Set up environment variables
      run: |
        echo "MONGODB_URL=mongodb://admin:password123@localhost:27017/jobportal_test?authSource=admin" >> $GITHUB_ENV
        echo "OPENAI_API_KEY=sk-test-key-for-ci" >> $GITHUB_ENV
        echo "SECRET_KEY=test-secret-key-for-ci-pipeline" >> $GITHUB_ENV
        echo "ENVIRONMENT=test" >> $GITHUB_ENV

    - name: Wait for MongoDB to be ready
      run: |
        timeout 60s bash -c 'until mongosh mongodb://admin:password123@localhost:27017/admin --eval "db.runCommand(\"ping\")" --quiet; do sleep 2; done'

    - name: Run tests with pytest
      run: |
        cd backend
        python -m pytest tests/ -v --cov=. --cov-report=xml --cov-report=html --cov-report=term-missing

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        directory: ./backend/
        flags: backend
        name: backend-coverage
        fail_ci_if_error: false

    - name: Upload coverage reports as artifacts
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: coverage-reports
        path: |
          backend/coverage.xml
          backend/htmlcov/

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install linting dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black flake8 isort mypy

    - name: Run Black (code formatting)
      run: |
        cd backend
        black --check --diff .

    - name: Run isort (import sorting)
      run: |
        cd backend
        isort --check-only --diff .

    - name: Run flake8 (linting)
      run: |
        cd backend
        flake8 .

    # - name: Run mypy (type checking)
    #   run: |
    #     cd backend
    #     mypy .
